"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ts_object_transformer_1 = require("./ts-object-transformer");
describe("ts-object-transformer", () => {
    it("object transformation", () => {
        let transformedResult = ts_object_transformer_1.transformObject({ date: "2018-10-04T00:00:00+0200", date2: 1538604000000, aString: "Hello%20World", idempotentValue: "foo" }, { date: Date.parse, date2: (ts) => new Date(ts), aString: unescape }, { computed: (obj) => `${obj ? `${obj.aString}__${obj.idempotentValue}` : ''}` });
        expect(Object.keys(transformedResult)).toEqual(['date', 'date2', 'aString', 'idempotentValue', 'computed']);
        let v1 = transformedResult.date;
        expect(typeof v1).toEqual('number');
        expect(v1).toEqual(1538604000000);
        let v2 = transformedResult.date2;
        expect(typeof v2).toEqual('object');
        expect(v2).toBeInstanceOf(Date);
        expect(v2.getTime()).toEqual(1538604000000);
        let v3 = transformedResult.aString;
        expect(typeof v3).toEqual('string');
        expect(v3).toEqual('Hello World');
        let v4 = transformedResult.idempotentValue;
        expect(typeof v4).toEqual('string');
        expect(v4).toEqual('foo');
        let v5 = transformedResult.computed;
        expect(typeof v5).toEqual('string');
        expect(v5).toEqual('Hello%20World__foo');
    });
    it("object transformation with no computed values", () => {
        let transformedResult = ts_object_transformer_1.transformObject({ date: "2018-10-04T00:00:00+0200", date2: 1538604000000, aString: "Hello%20World", idempotentValue: "foo" }, { date: Date.parse, date2: (ts) => new Date(ts), aString: unescape });
        expect(Object.keys(transformedResult)).toEqual(['date', 'date2', 'aString', 'idempotentValue']);
        let v1 = transformedResult.date;
        expect(typeof v1).toEqual('number');
        expect(v1).toEqual(1538604000000);
        let v2 = transformedResult.date2;
        expect(typeof v2).toEqual('object');
        expect(v2).toBeInstanceOf(Date);
        expect(v2.getTime()).toEqual(1538604000000);
        let v3 = transformedResult.aString;
        expect(typeof v3).toEqual('string');
        expect(v3).toEqual('Hello World');
        let v4 = transformedResult.idempotentValue;
        expect(typeof v4).toEqual('string');
        expect(v4).toEqual('foo');
    });
    function jsonMappingsWithFieldMappings(fieldMapping) {
        let transformedResult = ts_object_transformer_1.transformObject({ date: "2018-10-04T00:00:00+0200", date2: 1538604000000, aString: "Hello%20World", idempotentValue: "foo" }, fieldMapping, { computed: (obj) => `${obj ? `${obj.aString}__${obj.idempotentValue}` : ''}` });
        expect(Object.keys(transformedResult)).toEqual(['date', 'date2', 'aString', 'idempotentValue', 'computed']);
        let v1 = transformedResult.date;
        expect(typeof v1).toEqual('string');
        expect(v1).toEqual('2018-10-04T00:00:00+0200');
        let v2 = transformedResult.date2;
        expect(typeof v2).toEqual('number');
        expect(v2).toEqual(1538604000000);
        let v3 = transformedResult.aString;
        expect(typeof v3).toEqual('string');
        expect(v3).toEqual('Hello%20World');
        let v4 = transformedResult.idempotentValue;
        expect(typeof v4).toEqual('string');
        expect(v4).toEqual('foo');
        let v5 = transformedResult.computed;
        expect(typeof v5).toEqual('string');
        expect(v5).toEqual('Hello%20World__foo');
    }
    it("object transformation with no field mappings", () => {
        jsonMappingsWithFieldMappings({});
    });
    it("object transformation with undefined field mappings", () => {
        jsonMappingsWithFieldMappings(undefined);
    });
    it("idempotent transformation", () => {
        let transformedResult = ts_object_transformer_1.transformObject({ date: "2018-10-04T00:00:00+0200", date2: 1538604000000, aString: "Hello%20World", idempotentValue: "foo" });
        expect(Object.keys(transformedResult)).toEqual(['date', 'date2', 'aString', 'idempotentValue']);
        let v1 = transformedResult.date;
        expect(typeof v1).toEqual('string');
        expect(v1).toEqual('2018-10-04T00:00:00+0200');
        let v2 = transformedResult.date2;
        expect(typeof v2).toEqual('number');
        expect(v2).toEqual(1538604000000);
        let v3 = transformedResult.aString;
        expect(typeof v3).toEqual('string');
        expect(v3).toEqual('Hello%20World');
        let v4 = transformedResult.idempotentValue;
        expect(typeof v4).toEqual('string');
        expect(v4).toEqual('foo');
    });
    it('Readme examples', () => {
        let transformedResult = ts_object_transformer_1.transformObject({ date: "2018-10-04T00:00:00+0200", date2: 1538604000000, aString: "Hello%20World", idempotentValue: "foo" }, { date: Date.parse, date2: (ts) => new Date(ts), aString: unescape }, { computed: (obj) => `${obj ? `${obj.aString}__${obj.idempotentValue}` : ''}` });
        console.log(transformedResult.date);
        console.log(transformedResult.date2);
        console.log(transformedResult.aString);
        console.log(transformedResult.idempotentValue);
        console.log(transformedResult.computed);
        let transformedResult2 = ts_object_transformer_1.transformObject({ date: "2018-10-04T00:00:00+0200", date2: 1538604000000, aString: "Hello%20World", idempotentValue: "foo" }, { date: Date.parse, date2: (ts) => new Date(ts), aString: unescape });
        console.log(transformedResult2.date);
        console.log(transformedResult2.date2);
        console.log(transformedResult2.aString);
        console.log(transformedResult2.idempotentValue);
        let transformedResult3 = ts_object_transformer_1.transformObject({ date: "2018-10-04T00:00:00+0200", date2: 1538604000000, aString: "Hello%20World", idempotentValue: "foo" }, undefined, { computed: (obj) => `${obj ? `${obj.aString}__${obj.idempotentValue}` : ''}` });
        console.log(transformedResult3.date);
        console.log(transformedResult3.date2);
        console.log(transformedResult3.aString);
        console.log(transformedResult3.idempotentValue);
        console.log(transformedResult3.computed);
    });
});
